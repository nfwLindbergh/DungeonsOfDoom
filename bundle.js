!function(n){var t={};function e(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return n[r].call(o.exports,o,o.exports,e),o.l=!0,o.exports}e.m=n,e.c=t,e.d=function(n,t,r){e.o(n,t)||Object.defineProperty(n,t,{enumerable:!0,get:r})},e.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},e.t=function(n,t){if(1&t&&(n=e(n)),8&t)return n;if(4&t&&"object"==typeof n&&n&&n.__esModule)return n;var r=Object.create(null);if(e.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:n}),2&t&&"string"!=typeof n)for(var o in n)e.d(r,o,function(t){return n[t]}.bind(null,o));return r},e.n=function(n){var t=n&&n.__esModule?function(){return n.default}:function(){return n};return e.d(t,"a",t),t},e.o=function(n,t){return Object.prototype.hasOwnProperty.call(n,t)},e.p="",e(e.s=0)}([function(n,t,e){"use strict";e.r(t);e(1);window.onload=function(){var n=function(){function n(){this.monsterList=[],this.player=null,this.playerIds=null,this.monsterIds=null,this.logCount=""}return n.prototype.beginFight=function(){this.monsterList[0].health=this.monsterList[0].health-this.player.strength,this.monsterIds[2].value=this.monsterList[0].health.toString(),this.monsterList[0].health<=0&&(this.logCount=this.logCount+"The "+this.monsterList[0].name+" died<br>",this.removeMonster(),this.upDateMonsterValue())},n.prototype.updatePlayerValues=function(){this.playerIds=document.querySelectorAll("#player > input"),this.playerIds[0].value=this.player.name.toString(),this.playerIds[1].value=this.player.strength.toString(),this.playerIds[2].value=this.player.health.toString()},n.prototype.upDateMonsterValue=function(){this.monsterIds=document.querySelectorAll("#monster > input"),this.monsterList.length>0?(this.monsterIds[0].value=this.monsterList[0].name.toString(),this.monsterIds[1].value=this.monsterList[0].strength.toString(),this.monsterIds[2].value=this.monsterList[0].health.toString()):alert("You won! All monsters are dead!")},n.prototype.removeMonster=function(){this.monsterList.shift()},n}(),t=function(n,t,e){this.name=n,this.health=t,this.strength=e,this.name=n,this.health=t,this.strength=e},e=function(n,t,e){this.name=n,this.health=t,this.strength=e,this.name=n,this.health=t,this.strength=e},r=function(){function n(){}return n.readInAndCreatePlayer=function(n){var t=document.querySelector("#playerData");n.player=new e(t.dataset.name,parseInt(t.dataset.health,10),parseInt(t.dataset.strength,10))},n.readInAndCreateMonster=function(n){document.querySelectorAll("#monsters > input").forEach(function(e){n.monsterList.push(new t(e.dataset.name,parseInt(e.dataset.health,10),parseInt(e.dataset.strength,10)))})},n}(),o=new n;r.readInAndCreateMonster(o),r.readInAndCreatePlayer(o),o.updatePlayerValues(),o.upDateMonsterValue();var a=document.querySelector("#fight"),i=document.querySelector("#console");a.onclick=function(){o.logCount=o.logCount+"POW!!! <br>- "+o.player.name+" bitch-slapped "+o.monsterList[0].name+" and gave "+o.player.strength+" damage <br>"+o.monsterList[0].name+": OW! *cries*<br>",o.beginFight(),i.innerHTML=o.logCount}}},function(n,t,e){var r=e(2);"string"==typeof r&&(r=[[n.i,r,""]]);var o={insert:"head",singleton:!1};e(4)(r,o);r.locals&&(n.exports=r.locals)},function(n,t,e){(n.exports=e(3)(!1)).push([n.i,'/* \nhtml5doctor.com Reset Stylesheet\nv1.6.1\nLast Updated: 2010-09-17\nAuthor: Richard Clark - http://richclarkdesign.com \nTwitter: @rich_clark\n*/\n\nhtml,\nbody,\ndiv,\nspan,\nobject,\niframe,\nh1,\nh2,\nh3,\nh4,\nh5,\nh6,\np,\nblockquote,\npre,\nabbr,\naddress,\ncite,\ncode,\ndel,\ndfn,\nem,\nimg,\nins,\nkbd,\nq,\nsamp,\nsmall,\nstrong,\nsub,\nsup,\nvar,\nb,\ni,\ndl,\ndt,\ndd,\nol,\nul,\nli,\nfieldset,\nform,\nlabel,\nlegend,\ntable,\ncaption,\ntbody,\ntfoot,\nthead,\ntr,\nth,\ntd,\narticle,\naside,\ncanvas,\ndetails,\nfigcaption,\nfigure,\nfooter,\nheader,\nhgroup,\nmenu,\nnav,\nsection,\nsummary,\ntime,\nmark,\naudio,\nvideo {\n  margin: 0;\n  padding: 0;\n  border: 0;\n  outline: 0;\n  font-size: 100%;\n  vertical-align: baseline;\n  background: transparent;\n}\n\nbody {\n  line-height: 1;\n}\n\narticle,\naside,\ndetails,\nfigcaption,\nfigure,\nfooter,\nheader,\nhgroup,\nmenu,\nnav,\nsection {\n  display: block;\n}\n\nnav ul {\n  list-style: none;\n}\n\nblockquote,\nq {\n  quotes: none;\n}\n\nblockquote:before,\nblockquote:after,\nq:before,\nq:after {\n  content: "";\n  content: none;\n}\n\na {\n  margin: 0;\n  padding: 0;\n  font-size: 100%;\n  vertical-align: baseline;\n  background: transparent;\n}\n\n/* change colours to suit your needs */\nins {\n  background-color: #ff9;\n  color: #000;\n  text-decoration: none;\n}\n\n/* change colours to suit your needs */\nmark {\n  background-color: #ff9;\n  color: #000;\n  font-style: italic;\n  font-weight: bold;\n}\n\ndel {\n  text-decoration: line-through;\n}\n\nabbr[title],\ndfn[title] {\n  border-bottom: 1px dotted;\n  cursor: help;\n}\n\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\n\n/* change border colour to suit your needs */\nhr {\n  display: block;\n  height: 1px;\n  border: 0;\n  border-top: 1px solid #cccccc;\n  margin: 1em 0;\n  padding: 0;\n}\n\ninput,\nselect {\n  vertical-align: middle;\n}\n#header {\n  text-align: center;\n  background: red;\n  padding: 20px;\n  clear: both;\n  border-bottom: 3px solid gray;\n}\n#header h1 {\n  font-size: 40px;\n}\n#monsters {\n  display: none;\n}\n#combatArea {\n  display: flex;\n  align-items: center;\n}\n#player,\n#monster {\n  padding: 20px 40px;\n  text-align: center;\n  flex-grow: 2;\n}\n#fight {\n  flex-grow: 1;\n}\nlabel {\n  display: inline-block;\n  min-width: 100px;\n}\n',""])},function(n,t,e){"use strict";n.exports=function(n){var t=[];return t.toString=function(){return this.map(function(t){var e=function(n,t){var e=n[1]||"",r=n[3];if(!r)return e;if(t&&"function"==typeof btoa){var o=(i=r,s=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),l="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),"/*# ".concat(l," */")),a=r.sources.map(function(n){return"/*# sourceURL=".concat(r.sourceRoot).concat(n," */")});return[e].concat(a).concat([o]).join("\n")}var i,s,l;return[e].join("\n")}(t,n);return t[2]?"@media ".concat(t[2],"{").concat(e,"}"):e}).join("")},t.i=function(n,e){"string"==typeof n&&(n=[[null,n,""]]);for(var r={},o=0;o<this.length;o++){var a=this[o][0];null!=a&&(r[a]=!0)}for(var i=0;i<n.length;i++){var s=n[i];null!=s[0]&&r[s[0]]||(e&&!s[2]?s[2]=e:e&&(s[2]="(".concat(s[2],") and (").concat(e,")")),t.push(s))}},t}},function(n,t,e){"use strict";var r,o={},a=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},i=function(){var n={};return function(t){if(void 0===n[t]){var e=document.querySelector(t);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(n){e=null}n[t]=e}return n[t]}}();function s(n,t){for(var e=[],r={},o=0;o<n.length;o++){var a=n[o],i=t.base?a[0]+t.base:a[0],s={css:a[1],media:a[2],sourceMap:a[3]};r[i]?r[i].parts.push(s):e.push(r[i]={id:i,parts:[s]})}return e}function l(n,t){for(var e=0;e<n.length;e++){var r=n[e],a=o[r.id],i=0;if(a){for(a.refs++;i<a.parts.length;i++)a.parts[i](r.parts[i]);for(;i<r.parts.length;i++)a.parts.push(m(r.parts[i],t))}else{for(var s=[];i<r.parts.length;i++)s.push(m(r.parts[i],t));o[r.id]={id:r.id,refs:1,parts:s}}}}function u(n){var t=document.createElement("style");if(void 0===n.attributes.nonce){var r=e.nc;r&&(n.attributes.nonce=r)}if(Object.keys(n.attributes).forEach(function(e){t.setAttribute(e,n.attributes[e])}),"function"==typeof n.insert)n.insert(t);else{var o=i(n.insert||"head");if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}return t}var c,d=(c=[],function(n,t){return c[n]=t,c.filter(Boolean).join("\n")});function h(n,t,e,r){var o=e?"":r.css;if(n.styleSheet)n.styleSheet.cssText=d(t,o);else{var a=document.createTextNode(o),i=n.childNodes;i[t]&&n.removeChild(i[t]),i.length?n.insertBefore(a,i[t]):n.appendChild(a)}}var p=null,f=0;function m(n,t){var e,r,o;if(t.singleton){var a=f++;e=p||(p=u(t)),r=h.bind(null,e,a,!1),o=h.bind(null,e,a,!0)}else e=u(t),r=function(n,t,e){var r=e.css,o=e.media,a=e.sourceMap;if(o&&n.setAttribute("media",o),a&&btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),n.styleSheet)n.styleSheet.cssText=r;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(r))}}.bind(null,e,t),o=function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)};return r(n),function(t){if(t){if(t.css===n.css&&t.media===n.media&&t.sourceMap===n.sourceMap)return;r(n=t)}else o()}}n.exports=function(n,t){(t=t||{}).attributes="object"==typeof t.attributes?t.attributes:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=a());var e=s(n,t);return l(e,t),function(n){for(var r=[],a=0;a<e.length;a++){var i=e[a],u=o[i.id];u&&(u.refs--,r.push(u))}n&&l(s(n,t),t);for(var c=0;c<r.length;c++){var d=r[c];if(0===d.refs){for(var h=0;h<d.parts.length;h++)d.parts[h]();delete o[d.id]}}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,